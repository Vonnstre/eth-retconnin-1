name: Build & Publish (Top-10k)

on:
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: "1"
  ETH_RPC_URL: "https://cloudflare-eth.com"
  ETH_PRICE_SOURCE: "coingecko"
  ETH_PRICE_USD: "3000"
  TOKENS_JSON: ""
  SIGNING_KEY_PATH: ""  # set via repo secret if you want CI to sign

jobs:
  shard:
    runs-on: ubuntu-latest
    timeout-minutes: 350
    strategy:
      fail-fast: false
      matrix:
        shard: [1,2,3,4,5,6,7,8,9,10]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare candidates & shard
        run: |
          mkdir -p data/raw data/shards
          if [ ! -f data/raw/candidates.csv ]; then
            python scripts/harvest_candidates.py --out data/raw/candidates.csv --lookback-blocks 18000 --concurrency 8
          fi
          python - <<'PY'
          import pandas as pd, math, os
          if not os.path.exists('data/raw/candidates.csv'):
              print('No candidates')
              open('data/raw/candidates.csv','w').write('address\n')
          df = pd.read_csv('data/raw/candidates.csv')
          n = len(df)
          parts = 10
          rows = math.ceil(n/parts) if n>0 else 0
          for i in range(parts):
              s = df.iloc[i*rows:(i+1)*rows] if rows>0 else df.iloc[0:0]
              s.to_csv(f'data/shards/shard_{i+1:02d}.csv', index=False)
          print('split into', parts, 'shards')
          PY
          ls -lh data/shards

      - name: Run pipeline (shard)
        run: |
          SHARD="data/shards/shard_${{ matrix.shard }}.csv"
          OUT="data/run_shard_${{ matrix.shard }}"
          mkdir -p "$OUT"
          python scripts/bulletproof_pipeline.py \
            --input "$SHARD" --out "$OUT" \
            --usd-threshold 10000 --top-n-multicall 12000 \
            --eth-conc 10 --eth-batch 100 --token-conc 6 --token-batch 100
          chmod +x scripts/buyer_verifier.sh || true

      - name: Upload shard artifact
        uses: actions/upload-artifact@v4
        with:
          name: shard_${{ matrix.shard }}
          path: data/run_shard_${{ matrix.shard }}

  finalize:
    needs: [shard]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge shards and produce final top10k
        run: |
          python - <<'PY'
          import pandas as pd, glob, os
          os.makedirs('data/run_final/delivery', exist_ok=True)
          paths = sorted(glob.glob('artifacts/**/top10k_whales_raw.csv', recursive=True))
          dfs=[]
          for p in paths:
              try: dfs.append(pd.read_csv(p))
              except: pass
          if not dfs:
              paths = sorted(glob.glob('artifacts/**/balances_with_usd.csv', recursive=True))
              for p in paths:
                  try: dfs.append(pd.read_csv(p))
                  except: pass
          if not dfs:
              raise SystemExit('No shard outputs')
          full = pd.concat(dfs, ignore_index=True).drop_duplicates(subset=['address']).reset_index(drop=True)
          full.to_csv('data/run_final/merged.csv', index=False)
          if 'usd_value' in full.columns:
              top = full.sort_values('usd_value', ascending=False).head(10000)
          else:
              top = full.head(10000)
          top.to_csv('data/run_final/top10k_whales_raw.csv', index=False)
          print('Final top10k rows:', len(top))
          PY

      - name: Compute merkle & sample & sign & package
        run: |
          python scripts/merkle_proofs.py --input data/run_final/top10k_whales_raw.csv --out data/run_final/delivery --samples 0 1 2 3 4 5 6 7 8 9
          python scripts/proof_and_sample.py --dataset data/run_final/top10k_whales_raw.csv --out data/run_final/delivery --sample-size 100 ${SIGNING_KEY_PATH:+--privkey ${SIGNING_KEY_PATH}}
          if [ -f data/run_final/delivery/merkle_root.txt ] && [ -n "$SIGNING_KEY_PATH" ]; then
            python - <<'PY'
            from pathlib import Path
            from cryptography.hazmat.primitives import serialization
            priv = Path('${SIGNING_KEY_PATH}').read_bytes()
            sk = serialization.load_pem_private_key(priv, password=None)
            mr = Path('data/run_final/delivery/merkle_root.txt').read_bytes()
            sig = sk.sign(mr)
            Path('data/run_final/delivery/merkle_root.sig').write_bytes(sig)
            print('Signed merkle_root')
            PY
          fi
          rm -f data/run_final/delivery/ed25519_private.pem || true
          mkdir -p data/run_final/delivery/scripts data/run_final/delivery/docs
          cp docs/DELIVERY_README.md data/run_final/delivery/docs/ || true
          cp scripts/buyer_verifier.sh data/run_final/delivery/scripts/ || true
          chmod +x data/run_final/delivery/scripts/buyer_verifier.sh || true
          cd data/run_final/delivery
          zip -r "Top10k_Delivery_$(date +%s).zip" ./*
          ls -lh *.zip

      - name: Upload delivery ZIP
        uses: actions/upload-artifact@v4
        with:
          name: top10k_delivery
          path: data/run_final/delivery/*.zip
